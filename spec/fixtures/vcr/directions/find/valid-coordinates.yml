---
http_interactions:
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/directions/json?destination=41.902270%2C12.457540&key=<API_KEY>&origin=41.890209%2C12.492231
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - excon/0.67.0
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: 
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Wed, 16 Oct 2019 13:22:14 GMT
      Pragma:
      - no-cache
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Cache-Control:
      - no-cache, must-revalidate
      Server:
      - mafe
      X-XSS-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      Server-Timing:
      - gfet4t7; dur=209
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000
      Accept-Ranges:
      - none
      Vary:
      - Accept-Language,Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 16 Oct 2019 13:22:14 GMT
recorded_with: VCR 4.0.0
